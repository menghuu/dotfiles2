#!/usr/bin/env bash
#
# Install the configure file including shell configure and vim configure

vimcdoc_url="https://sourceforge.net/projects/vimcdoc/files/vimcdoc/vimcdoc-2.1.0.tar.gz/download"

this_script_dir=$(cd "$(dirname "$0")"; pwd)

function usage() {
  echo "install dotfiles"
  echo ""
  echo "USAGE:"
  echo "install [-h] [-v] [-n] [-b <backup_dir>] [-i <install_dir>]"
  echo "    -h: echo this documents"
  echo "    -v: print details when install"
  echo "    -n: not backup file in -b"
  echo "    -b: backup dir, default is \$HOME/.backups"
  echo "    -i: install dir, default is \$HOME"
  echo ""
  echo "-----------------------------------------------------------"
  echo "                         by m(https://menghuu.github.com)"
}

while getopts "nvb:i:hs:" opt; do
  case $opt in
    n)
      not_backup=true
      ;;
    v)
      verbose=true
      ;;
    b)
      backup_dir=${OPTARG}
      ;;
    i)
      install_dir=${OPTARG}
      ;;
    s)
      source_dir=${OPTARG}
      ;;
    h)
      usage
      exit 0
      ;;
    esac
done

verbose=${verbose:-false}
not_backup=${not_backup:-false}
debug=${debug:-false}

install_dir=${install_dir:-"$HOME"}
backup_dir=${backup_dir:-"${nstall_dir}/.backups"}
source_dir=${source_dir:-"${this_script_dir}"}

backup_dir=$(realpath ${backup_dir})
install_dir=$(realpath ${install_dir})
source_dir=$(realpath ${source_dir})

if ${verbose}; then
   echo backup_dir is: "${backup_dir}"
   echo verbose is: "${verbose}"
   echo not_backup is: "${not_backup}"
   echo install_dir is: "${install_dir}"
   echo source_dir is: "${source_dir}"
   echo "========================="
fi

function hm_backup() {
  # test if a link
  should_mv=$1
  backup_file_path="${backup_dir}/${should_mv}"
  if [ ! -e "${should_mv}" ]; then
    ${verbose} && echo "    ${should_mv} not exist"
    exit 0
  fi
  if [ -L "${should_mv}" ]; then
    "${verbose}" && echo "    mv link ${should_mv} to ${backup_file_path}"
    real_link="$(realpath ${should_mv})"
    ln -s ${real_link} "${backup_file_path}"
  else
    "${verbose}" && echo "mv file/dir ${should_mv} to ${backup_file_path}"
    mv -f -r "${should_mv}" "${backup_file_path}"
  fi
}

echo "link file in ${source_dir}/dotfiles excluding .config"
for file_name in $(ls -1A "${source_dir}/dotfiles"); do
  if [ file_name = '.config' ]; then
    # the ~/.config dir should be handled in other way
    continue
  fi
  file_path="${source_dir}/dotfiles/${file_name}"
  backup_path="${backup_dir}/${file_name}"
  install_path="${install_dir}/${file_name}"
  if ! "${not_backup}"; then
    hm_backup ${install_path}
  fi
  ln -s -f "${file_path}" "${install_path}"
  if "${verbose}"; then
  echo -n "  $(tput setaf 2)link ${install_path} --> ${file_path}\tsuccess$(tput sgr 0)"
  fi
done

echo "link file in ${source_dir}/dotfiles/.config"
mkdir -p "${install_dir}/.config"
mkdir -p "${backup_dir}/.config"
for file_name in $(ls -1A "${source_dir}/dotfiles/.config"); do
  file_path="${source_dir}/dotfiles/.config/${file_name}"
  backup_path="${backup_dir}/.config/${file_name}"
  install_path="${install_dir}/.config/${file_name}"
  if ! "${not_backup}"; then
    hm_backup ${install_path}
  fi
  ln -s -f "${file_path}" "${install_path}"
  if "${verbose}"; then
  echo -n "  $(tput setaf 2)link ${install_path} --> ${file_path}\tsuccess$(tput sgr 0)"
  fi
done

echo "install vim chinese document"
tmp_dir=$(mktemp -d)
install_vimcdoc=${install_vimcdoc:-true}

${verbose} && echo "mkdir temp dir ${tmp_dir}"

${install_vimcdoc} && \
(
  command -v wget > /dev/null && (${verbose} && echo "$(tput setaf 3)find wget, using wget to download vimcdoc" || true) && wget -q -O "${tmp_dir}/vimcdoc.tar.gz" ${vimcdoc_url} \
  || (command -v curl > /dev/null && (${verbose} && echo "$(tput setaf 3)find wget, using curl to download vimcdoc" || true) && curl -L -s -o "${tmp_dir}/vimcdoc.tar.gz" ${vimcdoc_url})\
  || (echo "cannot find wget and curl, stop install this document" && install_vimcdoc=false)
)

${install_vimcdoc} && tar -xzf "${tmp_dir}/vimcdoc.tar.gz" -C "${tmp_dir}" && (cd $(find ${tmp_dir} -maxdepth 1 -type d -name 'vimcdoc*') && sh ./vimcdoc.sh -i > /dev/null) && echo "$(tput setaf 2)install vimcdoc successfully"
rm -fr ${tmp_dir}


echo "install autojump$"
(cd ${this_script_dir} && ./install.py)



(!(command -v tmux > /dev/null)) && echo "$(tput setaf 1)should install tmux manually$(tput sgr 0)"
