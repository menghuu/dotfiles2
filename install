#!/usr/bin/env bash
#
# Install the configure file including shell configure and vim configure

vimcdoc_url="https://sourceforge.net/projects/vimcdoc/files/vimcdoc/vimcdoc-2.1.0.tar.gz/download"

this_script_dir=$(cd "$(dirname "$0")"; pwd)

function usage() {
  echo "install dotfiles"
  echo ""
  echo "USAGE:"
  echo "install [-h] [-v] [-n] [-b <backup_dir>] [-i <install_dir>]"
  echo "    -h: echo this documents"
  echo "    -v: print details when install"
  echo "    -n: not backup file in -b"
  echo "    -b: backup dir, default is \$HOME/.backups/dotfile_\$\(date +'%Y-%m-%d-%T'\)"
  echo "    -i: install dir, default is \$HOME"
  echo ""
  echo "-----------------------------------------------------------"
  echo "                         by m(https://menghuu.github.com)"
}

while getopts "nvb:i:hs:" opt; do
  case $opt in
    n)
      not_backup=true
      ;;
    v)
      verbose=true
      ;;
    b)
      backup_dir=${OPTARG}
      ;;
    i)
      install_dir=${OPTARG}
      ;;
    s)
      source_dir=${OPTARG}
      ;;
    h)
      usage
      exit 0
      ;;
    esac
done

case "$(uname)" in
  *Darwin*)
    realpath() {
     [[ $1 = /* ]] && echo "$1" || echo "$PWD/${1#./}"
    }
  ;;
esac


verbose=${verbose:-false}
not_backup=${not_backup:-false}
debug=${debug:-false}

install_dir=${install_dir:-"$HOME"}
install_dir=$(realpath ${install_dir})
backup_dir=${backup_dir:-"${install_dir}/.backups/dotfile_$(date +'%Y-%m-%d-%T')"}
mkdir -p ${backup_dir}
source_dir=${source_dir:-"${this_script_dir}"}
source_dir=$(realpath ${source_dir})


function hm_echo_info() {
  echo "$(tput setaf 3)$*$(tput sgr 0)"
}

function hm_echo_debug() {
  echo "$(tput setaf 6)$*$(tput sgr 0)"
}

function hm_echo_error() {
  echo "$(tput setaf 1)$*$(tput sgr 0)"
}

function hm_echo_success() {
  echo "$(tput setaf 2)$*$(tput sgr 0)"
}

if ${verbose}; then
   hm_echo_info backup_dir is: "${backup_dir}"
   hm_echo_info verbose is: "${verbose}"
   hm_echo_info not_backup is: "${not_backup}"
   hm_echo_info install_dir is: "${install_dir}"
   hm_echo_info source_dir is: "${source_dir}"
   hm_echo_info "========================="
fi

function append_line() {
  set -e

  local update line file pat lno
  update="$1"
  line="$2"
  file="$3"
  pat="${4:-}"
  lno=""

  echo "Update $file:"
  echo "  - $line"
  if [ -f "$file" ]; then
    if [ $# -lt 4 ]; then
      lno=$(\grep -nF "$line" "$file" | sed 's/:.*//' | tr '\n' ' ')
    else
      lno=$(\grep -nF "$pat" "$file" | sed 's/:.*//' | tr '\n' ' ')
    fi
  fi
  if [ -n "$lno" ]; then
    echo "    - Already exists: line #$lno"
  else
    if [ $update -eq 1 ]; then
      [ -f "$file" ] && echo >> "$file"
      echo "$line" >> "$file"
      echo "    + Added"
    else
      echo "    ~ Skipped"
    fi
  fi
  echo
  set +e
}

function hm_backup() {
  local from_path="$1"
  local file_name="$(basename ${from_path})"
  local dest_dir="$2"
  local dest_path="${dest_dir}/${file_name}"
  local verbose="$3"

  #echo "dest_dir is ${dest_dir}"
  if [ ! -e "${from_path}" ]; then
    ${verbose} && hm_echo_debug "${from_path} is not exist"
  elif [ -L "${dest_dir}" ]; then
    ${verbose} && hm_echo_debug "${dest_dir} is a link, not backup it!"
  elif [ -L "${from_path}" ]; then
    real_path="$(realpath ${from_path})"
    ${verbose} && hm_echo_debug "back link ${from_path}(${real_path}) to ${dest_path}"
    ln -sf ${real_path} "${dest_dir}"
    rm "${dest_path}" 2>&1 > /dev/null
  else
    "${verbose}" && hm_echo_debug "mv file/dir ${from_path} to ${dest_path}"
    mv -f "${from_path}" "${dest_path}"
    rm "${dest_path}" 2>&1 > /dev/null
  fi
}

function elementIn() {
  local f="$1"
  shift
  local arr=($@)
  for e in "${arr[@]}"; do [[ "$e" == "$f" ]] && return 0; done
  return 1
}

function hm_link(){
  local base_dir dest_dir backup_dir not_backup verbose exclude_names
  local from_path backup_path dest_path
  base_dir=${1}
  dest_dir=${2}
  backup_dir=${3}
  not_backup=${4}
  verbose=${5}
  shift 5
  exclude_names=($@)
  [ ! -e ${base_dir} ] && mkdir -p ${base_dir}
  [ ! -e ${dest_dir} ] && mkdir -p ${dest_dir}
  [ ! -e ${backup_dir} ] && mkdir -p ${backup_dir}
  for file_name in $(ls -1A "${base_dir}"); do
    if elementIn "${file_name}" ${exclude_names[@]}; then
      ${verbose} && hm_echo_debug "${file_name} is excluded"
      continue
    fi
    echo "do with ${file_name}"
    from_path="${base_dir}/${file_name}"
    backup_path="${backup_dir}/${file_name}"
    dest_path="${dest_dir}/${file_name}"
    if ! "${not_backup}"; then
      hm_backup "${dest_path}" "${backup_dir}" ${verbose}
      ${verbose} && hm_echo_debug "backup ${dest_path} success"
    fi
    ${verbose} && hm_echo_debug "link ${dest_path} --> ${from_path}   success"
    ln -s -f "${from_path}" "${dest_dir}"
  done
}

#===============================================================================
hm_echo_info 'mkdir ~/.local/bin and ~/apps'
mkdir -p ~/.local/bin
mkdir -p ~/apps


#===============================================================================
hm_echo_info "link file in ${source_dir}/dotfiles excluding .config"
hm_link "${source_dir}/dotfiles" "${install_dir}" "${backup_dir}" \
    ${not_backup} ${verbose} ".config" ".local"


#===============================================================================
hm_echo_info "link file in ${source_dir}/dotfiles/.config"
hm_link "${source_dir}/dotfiles/.config" "${install_dir}/.config" \
    "${backup_dir}/.config" ${not_backup} ${verbose}


#===============================================================================
hm_echo_info "install vim chinese document"
tmp_dir=$(mktemp -d)
install_vimcdoc=${install_vimcdoc:-true}
if [ -e "$HOME/.vim/doc/debug.cnx" ]; then
  install_vimcdoc=false
fi

${verbose} && hm_echo_debug "mkdir temp dir ${tmp_dir}"

if ${install_vimcdoc}; then \
  (command -v curl > /dev/null \
      && (${verbose} && hm_echo_debug "find curl, using curl to download vimcdoc" || true) \
	  && curl -L -s -o "${tmp_dir}/vimcdoc.tar.gz" ${vimcdoc_url})\
  || (hm_echo_error "cannot find curl, stop install this document" && install_vimcdoc=false)
else
  hm_echo_success "vimcdoc has been installed or you disable the vimcdoc installing"
fi

${install_vimcdoc} && tar -xzf "${tmp_dir}/vimcdoc.tar.gz" -C "${tmp_dir}" \
    && (cd $(find ${tmp_dir} -maxdepth 1 -type d -name 'vimcdoc*') \
    && sh ./vimcdoc.sh -i > /dev/null) \
    && hm_echo_success "install vimcdoc successfully"
rm -fr ${tmp_dir}


#===============================================================================
hm_echo_info "git clone z.lua"
(command -v lua > /dev/null \
  && (${verbose} && hm_echo_debug 'has install lua' || true)\
  && git clone 'https://github.com/skywind3000/z.lua.git' ~/apps/z.lua || true) \
  || hm_echo_error 'you should install lua manual'

#===============================================================================
hm_echo_info "install vim-plug"
if [ ! -e "${HOME}/.vim/autoload/plug.vim" ]; then
 (${verbose} && echo "download vim-plug" || true)\
  && curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim \
    && hm_echo_success "success" || hm_echo_error "fail"
else
  hm_echo_success "success"
fi

#===============================================================================
hm_echo_info "append configure into shell rc"

touch ~/.bashrc

hm_echo_info "append configure into bash rc"
append_line $([ -e "$HOME/.bashrc" ] && echo 1 || echo 0) \
  'source "${HOME}/.config/shell/rc.commons"' "$HOME/.bashrc" 2>&1 > /dev/null \
  && hm_echo_success "success" || hm_echo_error "fail"

hm_echo_info "append configure into zsh rc"
append_line $([ -e "$HOME/.zshrc" ] && echo 1 || echo 0) \
  'source "${HOME}/.config/shell/rc.commons"' "$HOME/.zshrc" 2>&1 > /dev/null \
  && hm_echo_success "success" || hm_echo_error "fail"

#===============================================================================
hm_echo_info "install fzf"
"${install_dir}/.fzf/install" --all 2>&1 1>/dev/null \
  && hm_echo_success "success" || hm_echo_error "fail"


#===============================================================================
hm_echo_info "optional: below things are suggested"
(!(command -v tmux > /dev/null)) && hm_echo_info "should install tmux manually"
hm_echo_info "suggestion install git completion, see: https://github.com/bobthecow/git-flow-completion/wiki/Install-Bash-git-completion"
