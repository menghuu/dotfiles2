#!/usr/bin/env bash

#INSHELL=$(sh -c 'ps -p $$ -o ppid=' | xargs ps -o cmd= -p

INSHELL="$0"

case $INSHELL in
  *zsh*)
    INSHELL='zsh'
    ;;
  *bash*)
    INSHELL='bash'
    ;;
  sh)
    INSHELL='sh'
    echo "$(tput setaf 1)dot not support SHELL(${$INSHELL})$(tput sgr 0)"
    exit 1
    ;;
  *)
    echo "$(tput setaf 1)dot not support SHELL(${$INSHELL})$(tput sgr 0)"
    exit 1
    ;;
esac

this_script_dir="${HOME}/.config/shell/"

#echo shell is ${INSHELL}
#echo dir is ${this_script_dir}

function get_exclude_suffixes() {
  local sh_suffix=$1
  local exclude_suffix=()
  case ${sh_suffix} in
    bash)
      exclude_suffix+=( 'zsh' )
      ;;
    zsh)
      exclude_suffix+=( 'bash' )
      ;;
    sh)
      exclude_suffix+=( 'bash', 'zsh' )
      ;;
    *)
      echo "not support ${sh_suffix}"
      exit -1
  esac
  echo "${exclude_suffix}"
}

function elementIn() {
  local e
  for e in "${@:2}"; do [[ "$e" == "$1" ]] && return 0; done
  return 1
}

function hm_source() {
  local base_dir sh_suffix
  base_dir=$1
  sh_suffix=$2
  shift 2
  exclude_names="$@"
  exclude_suffixes="$(get_exclude_suffixes ${sh_suffix})"
  #echo exclude_suffixes is: ${exclude_suffixes}
  #echo exclude_names is: ${exclude_names}

  for file_path in $(find "${base_dir}" -maxdepth 1 -type f); do
    for exclude_suffix in "$(echo ${exclude_suffixes})"; do
      if [[ ! $(basename "${file_path}") =~ ${exclude_suffix} ]] \
        && ! elementIn "$(basename ${file_path})" ${exclude_names[@]} ; then
        . "${file_path}"
      fi
    done
  done
}

# common setting

# (little)color prompt
# see here: https://www.tunnelsup.com/bash-prompt-color/
txtblk='\e[0;30m' # Black - Regular
txtred='\e[0;31m' # Red
txtgrn='\e[0;32m' # Green
txtylw='\e[0;33m' # Yellow
txtblu='\e[0;34m' # Blue
txtpur='\e[0;35m' # Purple
txtcyn='\e[0;36m' # Cyan
txtwht='\e[0;37m' # White
bldblk='\e[1;30m' # Black - Bold
bldred='\e[1;31m' # Red
bldgrn='\e[1;32m' # Green
bldylw='\e[1;33m' # Yellow
bldblu='\e[1;34m' # Blue
bldpur='\e[1;35m' # Purple
bldcyn='\e[1;36m' # Cyan
bldwht='\e[1;37m' # White
unkblk='\e[4;30m' # Black - Underline
undred='\e[4;31m' # Red
undgrn='\e[4;32m' # Green
undylw='\e[4;33m' # Yellow
undblu='\e[4;34m' # Blue
undpur='\e[4;35m' # Purple
undcyn='\e[4;36m' # Cyan
undwht='\e[4;37m' # White
bakblk='\e[40m'   # Black - Background
bakred='\e[41m'   # Red
badgrn='\e[42m'   # Green
bakylw='\e[43m'   # Yellow
bakblu='\e[44m'   # Blue
bakpur='\e[45m'   # Purple
bakcyn='\e[46m'   # Cyan
bakwht='\e[47m'   # White
txtrst='\e[0m'    # Text Reset - Useful for avoiding color bleed

export PS1="\u\[$txtpur\] @ \[$txtrst\]\h \[$bldgrn\]\w\[$txtrst\] $\n: "

# Have less display colours
# from: https://wiki.archlinux.org/index.php/Color_output_in_console#man
export LESS_TERMCAP_mb=$'\E[1;31m'     # begin bold
export LESS_TERMCAP_md=$'\E[1;36m'     # begin blink
export LESS_TERMCAP_me=$'\E[0m'        # reset bold/blink
export LESS_TERMCAP_so=$'\E[01;44;33m' # begin reverse video
export LESS_TERMCAP_se=$'\E[0m'        # reset reverse video
export LESS_TERMCAP_us=$'\E[1;32m'     # begin underline
export LESS_TERMCAP_ue=$'\E[0m'        # reset underline
export GROFF_NO_SGR=1                  # for konsole and gnome-terminal
export MANPAGER='less -s -M +Gg'

# in mac, you should install the `brew` and `brew instlal coreutils` to replace the default utils in mac
# and configure this to totally replace the old utils in mac
case "$(uname)" in
  *Darwin*)
    export PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH"
    # bash completion
    [[ -r "/usr/local/etc/profile.d/bash_completion.sh" ]] && . "/usr/local/etc/profile.d/bash_completion.sh"
    [ -f /usr/local/etc/bash_completion ] && . /usr/local/etc/bash_completion || {
    # if not found in /usr/local/etc, try the brew --prefix location
    [ -f "$(brew --prefix)/etc/bash_completion.d/git-completion.bash" ] && \
        . $(brew --prefix)/etc/bash_completion.d/git-completion.bash
      }
    ;;
  *)
    ;;
esac

# environment variables

# fzf ctrl-T command
export FZF_CTRL_T_COMMAND='find'
# fasd configure
if (command -v fasd 1 >&2 2 > /dev/null) ; then
  eval "$(fasd --init auto)"
  alias a='fasd -a'        # any
  alias s='fasd -si'       # show / search / select
  alias d='fasd -d'        # directory
  alias f='fasd -f'        # file
  alias sd='fasd -sid'     # interactive directory selection
  alias sf='fasd -sif'     # interactive file selection
  alias z='fasd_cd -d'     # cd, same functionality as j in autojump
  alias zz='fasd_cd -d -i' # cd with interactive selection
fi

# add $HOME/.local/bin in to PATH
if ! [[ $PATH =~ $HOME/.local/bin ]]; then
  export PATH="$HOME/.local/bin:$PATH"
fi
if ! [[ $MANPATH =~ $HOME/.local/share/man ]]; then
  export MANPATH="$HOME/.local/share/man:$MANPATH"
fi

# should set the x11 forward before this
# ssh this pc by `ssh -lY username@ip`
if [ -n "$SSH_CLIENT" ]; then
  if [ -z "${DISPLAY}" ]; then
    export DISPLAY='localhost:10'
  fi
fi

# z.lua
# need lua to using z.lua
(command -v lua > /dev/null) && \
if [ "$INSHELL" = 'bash' -o "$INSHELL" = 'zsh' ]; then
  eval "$(lua ~/apps/z.lua/z.lua --init $INSHELL)"
else
  eval "$(lua ~/apps/z.lua/z.lua --init posix)"
fi

# pyenv support
[[ "$PATH" =~ $HOME/.pyenv/bin ]] || export PATH="$HOME/.pyenv/bin:$PATH"

if ! [[ "$PATH" =~ $HOME/.pyenv/shims ]]; then
  (command -v pyenv > /dev/null) && \
    eval "$(pyenv init -)" #&& eval "$(pyenv virtualenv-init -)"
fi

# ruby

[[ "$PATH" =~ $HOME/.rbenv/bin ]] || export PATH="$HOME/.rbenv/bin:$PATH"

# linuxbrew
if [[ -e $HOME/.linuxbrew/bin ]]; then
  [[ "$PATH" =~ $HOME/.linuxbrew/bin ]] || eval $($HOME/.linuxbrew/bin/brew shellenv)
  #[[ "$PATH" =~ $HOME/.linuxbrew/bin ]] || export PATH="$HOME/.linuxbrew/bin:$PATH"
fi

# homebrew
if [[ -e $HOME/.homebrew/bin ]]; then
  [[ "$PATH" =~ $HOME/.homebrew/bin ]] || eval $($HOME/.homebrew/bin/brew shellenv)
 #[[ "$PATH" =~ $HOME/.homebrew/bin ]] || export PATH="$HOME/.homebrew/bin:$PATH"
fi

# anaconda
if [[ -e $HOME/anaconda3/bin ]]; then
  [[ "$PATH" =~ $HOME/anaconda3/bin ]] || export PATH="$HOME/anaconda3/bin:$PATH"
fi

# alias
hm_source "${this_script_dir}/aliases" "${INSHELL}"

# key bindings
hm_source "${this_script_dir}/bindings" "${INSHELL}"

# function
so(){
  if [ ! -n "$*" ]; then
    source ~/.${INSHELL}rc
  else
    source $@
  fi
}
