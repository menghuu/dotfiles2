#!/usr/bin/env bash
this_script_dir="${HOME}/.config/shell/"

function add_path() {
  [[ $# -lt 1 ]] && return 1
  for arg in $*; do
    [[ -d $arg ]] && {
      [[ $PATH =~ $arg ]] || export PATH="$arg:$PATH"
    }
  done
}

function add_manpath() {
  [[ $# -lt 1 ]] && return 1
  for arg in $*; do
    [[ -d $arg ]] && {
      [[ $MANPATH =~ $arg ]] || export MANPATH="$arg:$MANPATH"
    }
  done

}

function getshell() {
    local shell="`ps -p $$ | tail -1 | awk '{print $4}'`"

    shells_array=(
    # It is important that the shells are listed by the decrease of their length name.
        pdksh
        bash dash mksh
        zsh ksh
        sh
    )

    local suited=false
    for i in ${shells_array[*]}; do
        if ! [ -z `echo $shell | grep $i` ] && ! $suited; then
            shell=$i
            suited=true
        fi
    done
    echo $shell
}

# homebrew or linuxbrew support
export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles
add_path "$HOME/.linuxbrew/bin"
add_path "$HOME/.homebrew/bin"
add_path "$(brew --prefix)/opt/coreutils/libexec/gnubin"
command -v brew 2>&1 >/dev/null && eval "brew shellenv" 2>&1 >/dev/null

#INSHELL=$(sh -c 'ps -p $$ -o ppid=' | xargs ps -o cmd= -p
INSHELL="$(getshell)"

function so(){
  if [ ! -n "$*" ]; then
    source ~/.$(getshell)rc
  else
    for rc_file in $@ ; do
      if [[ -e $rc_file ]]; then
	source $rc_file
      fi
    done
  fi
}

case $(getshell) in
  *zsh*)
    INSHELL='zsh'
    ;;
  *bash*)
    INSHELL='bash'
    command -v brew 2>&1 >/dev/null && so "$(brew --prefix)/etc/profile.d/bash_completion.sh"
    ;;
  sh)
    INSHELL='sh'
    echo "$(tput setaf 1)dot not support SHELL(${$INSHELL}), sometimes, it maybe work$(tput sgr 0)"
    ;;
  *)
    echo "$(tput setaf 1)dot not support SHELL(${$INSHELL}), sometimes, it maybe work$(tput sgr 0)"
    ;;
esac

# function
function so_dir() {
  [ $# -lt 1 ] && return 1
  for _dir in $@; do
    if [[ -d $_dir ]]; then
      for rc_file in $_dir/*; do
	. $rc_file
      done
    fi
  done
}

function get_exclude_suffixes() {
  local sh_suffix=$1
  local exclude_suffix=()
  case ${sh_suffix} in
    bash)
      exclude_suffix+=( 'zsh' )
      ;;
    zsh)
      exclude_suffix+=( 'bash' )
      ;;
    sh)
      exclude_suffix+=( 'bash', 'zsh' )
      ;;
    *)
      echo "not support ${sh_suffix}"
      exit -1
  esac
  echo "${exclude_suffix}"
}

function elementIn() {
  local e
  for e in "${@:2}"; do [[ "$e" == "$1" ]] && return 0; done
  return 1
}

function hm_source() {
  local base_dir sh_suffix
  base_dir=$1
  sh_suffix=$2
  shift 2
  exclude_names="$@"
  exclude_suffixes="$(get_exclude_suffixes ${sh_suffix})"
  #echo exclude_suffixes is: ${exclude_suffixes}
  #echo exclude_names is: ${exclude_names}

  for file_path in $(find "${base_dir}" -maxdepth 1 -type f); do
    for exclude_suffix in "$(echo ${exclude_suffixes})"; do
      if [[ ! $(basename "${file_path}") =~ ${exclude_suffix} ]] \
        && ! elementIn "$(basename ${file_path})" ${exclude_names[@]} ; then
        source "${file_path}"
      fi
    done
  done
}

# common setting

# (little)color prompt
# see here: https://www.tunnelsup.com/bash-prompt-color/
txtblk='\e[0;30m' # Black - Regular
txtred='\e[0;31m' # Red
txtgrn='\e[0;32m' # Green
txtylw='\e[0;33m' # Yellow
txtblu='\e[0;34m' # Blue
txtpur='\e[0;35m' # Purple
txtcyn='\e[0;36m' # Cyan
txtwht='\e[0;37m' # White
bldblk='\e[1;30m' # Black - Bold
bldred='\e[1;31m' # Red
bldgrn='\e[1;32m' # Green
bldylw='\e[1;33m' # Yellow
bldblu='\e[1;34m' # Blue
bldpur='\e[1;35m' # Purple
bldcyn='\e[1;36m' # Cyan
bldwht='\e[1;37m' # White
unkblk='\e[4;30m' # Black - Underline
undred='\e[4;31m' # Red
undgrn='\e[4;32m' # Green
undylw='\e[4;33m' # Yellow
undblu='\e[4;34m' # Blue
undpur='\e[4;35m' # Purple
undcyn='\e[4;36m' # Cyan
undwht='\e[4;37m' # White
bakblk='\e[40m'   # Black - Background
bakred='\e[41m'   # Red
badgrn='\e[42m'   # Green
bakylw='\e[43m'   # Yellow
bakblu='\e[44m'   # Blue
bakpur='\e[45m'   # Purple
bakcyn='\e[46m'   # Cyan
bakwht='\e[47m'   # White
txtrst='\e[0m'    # Text Reset - Useful for avoiding color bleed

export PS1="\u\[$txtpur\] @ \[$txtrst\]\h \[$bldgrn\]\w\[$txtrst\] $\n: "

# Have less display colours
# from: https://wiki.archlinux.org/index.php/Color_output_in_console#man
export LESS_TERMCAP_mb=$'\E[1;31m'     # begin bold
export LESS_TERMCAP_md=$'\E[1;36m'     # begin blink
export LESS_TERMCAP_me=$'\E[0m'        # reset bold/blink
export LESS_TERMCAP_so=$'\E[01;44;33m' # begin reverse video
export LESS_TERMCAP_se=$'\E[0m'        # reset reverse video
export LESS_TERMCAP_us=$'\E[1;32m'     # begin underline
export LESS_TERMCAP_ue=$'\E[0m'        # reset underline
export GROFF_NO_SGR=1                  # for konsole and gnome-terminal
export MANPAGER='less -s -M +Gg'

# add $HOME/.local/bin in to PATH
add_path "$HOME/.local/bin"
add_manpath "$HOME/.local/share/man"

# 设置好一点的LC, 无论哪一种, 都尽量支持UTF-8
{
  locale -a | grep -i 'zh_CN.UTF8' 2>&1 >/dev/null && export LC_ALL=zh_CN.UTF8
} || {
  locale -a | grep -i 'zh_CN.UTF-8' 2>&1 >/dev/null && export LC_ALL=zh_CN.UTF-8
} || {
  locale -a | grep -i 'en_US.UTF8' 2>&1 >/dev/null && export LC_ALL=en_US.UTF8
} || {
  locale -a | grep -i 'en_US.UTF-8' 2>&1 >/dev/null && export LC_ALL=en_US.UTF-8
} || export LC_ALL=C

# fzf ctrl-T command
export FZF_CTRL_T_COMMAND='find'
# fasd configure
if (command -v fasd 1 >&2 2 > /dev/null) ; then
  eval "$(fasd --init auto)"
  alias a='fasd -a'        # any
  alias s='fasd -si'       # show / search / select
  alias d='fasd -d'        # directory
  alias f='fasd -f'        # file
  alias sd='fasd -sid'     # interactive directory selection
  alias sf='fasd -sif'     # interactive file selection
  alias z='fasd_cd -d'     # cd, same functionality as j in autojump
  alias zz='fasd_cd -d -i' # cd with interactive selection
fi

# z.lua
(command -v lua > /dev/null) && \
if [[ "$INSHELL" =~ 'bash' ]] || [[ "$INSHELL" =~ 'zsh' ]]; then
  eval "$(lua ~/apps/z.lua/z.lua --init $INSHELL)"
else
  eval "$(lua ~/apps/z.lua/z.lua --init posix)"
fi

# ruby
#add_path "$HOME/.rbenv/bin"

# anaconda and miniconda support
add_path "$HOME/anaconda3/bin"
add_path "$HOME/miniconda3/bin"
command -v conda 2>&1 >/dev/null && {
  conda_bin_path=`command -v conda`
  ( [[ $conda_bin_path =~ 'miniconda' ]] || [[ $conda_bin_path =~ 'anaconda' ]] ) \
  && {
   conda_root_path=$(dirname $(dirname $conda_bin_path)) 
    # maybe it should done with direnv ?
    # sometimes, we need ld path work but sometimes, we avoid it
  #  conda_ld_path=${conda_root_path}/lib
  #  [[ $LD_LIBRARY_PATH =~ ${conda_ld_path} ]] || export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:${conda_ld_path}"
  #  conda_include_path=$conda_root_path/include
  #  [[ $C_INCLUDE_PATH =~ ${conda_include_path} ]] || export C_INCLUDE_PATH="$C_INCLUDE_PATH:$conda_include_path"
  #  [[ $CPLUS_INCLUDE_PATH =~ ${conda_include_path} ]] || export CPLUS_INCLUDE_PATH="$LD_LIBRARY_PATH:${conda_include_path}"
  }
}

# pyenv support
add_path "$HOME/.pyenv/bin"
if ! [[ "$PATH" =~ $HOME/.pyenv/shims ]]; then
  (command -v pyenv > /dev/null) && \
    eval "$(pyenv init -)" && eval "$(pyenv virtualenv-init -)"
fi


# direnv
(command -v direnv > /dev/null) && eval "$(direnv hook $INSHELL)"

export HISTFILE=$HOME/.cached/.bash_history
export EDITOR=vim
export VISUAL=vim

# should set the x11 forward before this
# ssh this pc by `ssh -lY username@ip`
if [ -n "$SSH_CLIENT" ]; then
  if [ -z "${DISPLAY}" ]; then
    export DISPLAY='localhost:10'
  fi
fi


# alias
hm_source "${this_script_dir}/aliases" "${INSHELL}"

# key bindings
hm_source "${this_script_dir}/bindings" "${INSHELL}"

# functions
hm_source "${this_script_dir}/functions" "${INSHELL}"

